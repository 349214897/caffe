name: "BrodyNet"

# Training input.
layers {
  name: "data"
  type: DATA
  top: "data"
  data_param {
    source: "driving_img_train"
    backend: LMDB
    batch_size: 5
  }
  transform_param {
    mean_file: "driving_img_mean.binaryproto"
  }
  include: { phase: TRAIN }
}

# Bounding box label and pixel label.
layers {
  name: "label"
  type: DATA
  top: "label"
  data_param {
    source: "driving_label_train"
    backend: LMDB
    batch_size: 5
  }
  include: { phase: TRAIN }
}

# Test input.
layers {
  name: "data"
  type: DATA
  top: "data"
  data_param {
    source: "driving_img_test"
    backend: LMDB
    batch_size: 5
  }
  transform_param {
    mean_file: "driving_img_mean.binaryproto"
  }
  include: { phase: TEST }
}

# Bounding box label and pixel label.
layers {
  name: "label"
  type: DATA
  top: "label"
  data_param {
    source: "driving_label_test"
    backend: LMDB
    batch_size: 5
  }
  include: { phase: TEST }
}

# Split label layer into pixel and bounding box label.
layers {
  name: "slice-label"
  type: SLICE
  bottom: "label"
  top: "pixel-label"
  top: "bb-label"
  top: "height-label"
  top: "norm-label"
  slice_param {
    slice_dim: 1
    slice_point: 16
    slice_point: 80
    slice_point: 96
  }
}

# Concatenate the pixel labels 4 folds such that it can be used to mask
# all 4 dimensions of the bounding box predictions.
layers {
  name: "pixel-block"
  type: CONCAT
  bottom: "pixel-label"
  bottom: "pixel-label"
  bottom: "pixel-label"
  bottom: "pixel-label"
  top: "pixel-block"
  concat_param {
    concat_dim: 1
  }
}

layers {
  name: "height-block"
  type: CONCAT
  bottom: "height-label"
  bottom: "height-label"
  bottom: "height-label"
  bottom: "height-label"
  top: "height-block"
  concat_param {
    concat_dim: 1
  }
}

layers {
  name: "conv1"
  type: CONVOLUTION
  bottom: "data"
  top: "conv1"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "relu1"
  type: RELU
  bottom: "conv1"
  top: "conv1"
}
layers {
  name: "pool1"
  type: POOLING
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm1"
  type: LRN
  bottom: "pool1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layers {
  name: "conv2"
  type: CONVOLUTION
  bottom: "norm1"
  top: "conv2"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "relu2"
  type: RELU
  bottom: "conv2"
  top: "conv2"
}
layers {
  name: "pool2"
  type: POOLING
  bottom: "conv2"
  top: "pool2"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "norm2"
  type: LRN
  bottom: "pool2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layers {
  name: "conv3"
  type: CONVOLUTION
  bottom: "norm2"
  top: "conv3"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "relu3"
  type: RELU
  bottom: "conv3"
  top: "conv3"
}
layers {
  name: "conv4"
  type: CONVOLUTION
  bottom: "conv3"
  top: "conv4"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "relu4"
  type: RELU
  bottom: "conv4"
  top: "conv4"
}
layers {
  name: "conv5"
  type: CONVOLUTION
  bottom: "conv4"
  top: "conv5"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0.1
    }
  }
}
layers {
  name: "relu5"
  type: RELU
  bottom: "conv5"
  top: "conv5"
}
layers {
  name: "pool5"
  type: POOLING
  bottom: "conv5"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 3
    stride: 2
  }
}
layers {
  name: "fc6-conv"
  type: CONVOLUTION
  bottom: "pool5"
  top: "fc6-conv"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 4096
    kernel_size: 6
    pad: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layers {
  name: "relu6"
  type: RELU
  bottom: "fc6-conv"
  top: "fc6-conv"
}
layers {
  name: "drop6"
  type: DROPOUT
  bottom: "fc6-conv"
  top: "fc6-conv"
  dropout_param {
    dropout_ratio: 0.0
  }
}
layers {
  name: "fc7-conv"
  type: CONVOLUTION
  bottom: "fc6-conv"
  top: "fc7-conv"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 4096
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layers {
  name: "relu7"
  type: RELU
  bottom: "fc7-conv"
  top: "fc7-conv"
}
layers {
  name: "drop7"
  type: DROPOUT
  bottom: "fc7-conv"
  top: "fc7-conv"
  dropout_param {
    dropout_ratio: 0.0
  }
}

layers {
  name: "bb-output"
  type: CONVOLUTION
  bottom: "fc7-conv"
  top: "bb-output"
  blobs_lr: 100
  blobs_lr: 200
  weight_decay: 0.00001
  weight_decay: 0
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1.0
    }
  }
}

layers {
  name: "pixel-conv"
  type: CONVOLUTION
  bottom: "fc7-conv"
  top: "pixel-conv"
  blobs_lr: 1
  blobs_lr: 2
  weight_decay: 1
  weight_decay: 0
  convolution_param {
    num_output: 16
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1.0
    }
  }
}

# Pixel level logistic prediction.
#layers {
#  name: "pixel-prob"
#  type: SIGMOID
#  bottom: "pixel-conv"
#  top: "pixel-prob"
#}

# Pixel level logistic loss.
layers {
  name: "pixel-loss"
  type: SIGMOID_CROSS_ENTROPY_LOSS
  bottom: "pixel-conv"
  bottom: "pixel-label"
  top: "pixel-loss"
}

# Masking the bounding boxes with input label.
layers {
  name: "bb-prob-mask"
  type: ELTWISE
  bottom: "pixel-block"
  bottom: "bb-output"
  top: "bb-masked-output"
  eltwise_param {
    operation: PROD
  }
}

layers {
  name: "bb-loss"
  type: L1_LOSS
  bottom: "bb-masked-output"
  bottom: "bb-label"
  top: "bb-loss"
  loss_weight: 1
}

# Squared loss on the bounding boxes.
#layers {
#  name: "bb-loss"
#  type: EUCLIDEAN_LOSS
#  bottom: "bb-masked-output"
#  bottom: "bb-label"
#  top: "bb-loss"
#  loss_weight: 0.01
#}

# L1 error loss
#layers {
#  name: "bb-diff"
#  type: ELTWISE
#  bottom: "bb-masked-output"
#  bottom: "bb-label"
#  eltwise_param {
#    operation: SUM
#    coeff: 1.0
#    coeff: -1.0
#  }
#  top: "bb-diff"
#}

#layers {
#  name: "bb-loss"
#  type: ABSVAL
#  bottom: "bb-diff"
#  top: "bb-loss"
#  # 1 / (20 * 15 * 64)
#  loss_weight: 0.00000000001
#}

#layers {
#  name: "bb-loss-pow2"
#  type: POWER
#  bottom: "bb-diff"
#  top: "bb-loss-pow2"
#  # 1 / (20 * 15 * 64)
#  power_param {
#    power: 2
#  }
#}

#layers {
#  name: "bb-loss-height-normalize"
#  type: ELTWISE
#  bottom: "bb-loss-pow2"
#  bottom: "height-block"
#  eltwise_param {
#    operation: PROD
#  }
#  top: "bb-loss"
#  loss_weight: 0.1
#}

#layers {
#  name: "bb-loss-silence"
#  type: SILENCE
#  bottom: "bb-loss"
#}
